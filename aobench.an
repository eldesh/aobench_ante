import Random.drand48
import Math.sin cos sqrt

type Vec = x: F64, y: F64, z: F64
type Triple a = first: a, second: a, third: a
type Sphere = center: Vec, radius: F64
type Plane = p: Vec, n: Vec
type Ray = org: Vec, dir: Vec
type Isect = t: F64, p: Vec, n: Vec , hit: Bool


width: Usz = 256
height: Usz = 256
nsubsamples = 2
nao_samples = 8


init () : Triple Sphere, Plane =
  ss    = Triple (Sphere (Vec -2.0 0.0 -3.5) 0.5)
                 (Sphere (Vec -0.5 0.0 -3.0) 0.5)
                 (Sphere (Vec  1.0 0.0 -2.2) 0.5)
  plane = Plane  (Vec 0.0 -0.5 0.0)
                 (Vec 0.0  1.0 0.0)
  ss, plane


// inner product
iprod (v0:Vec) (v1:Vec) : F64 =
  (v0.x * v1.x) + (v0.y * v1.y) + (v0.z * v1.z)


abs v : F64 =
  if 0.0 <= v then v
  else 0.0 - v


vnormalize (c:Vec) : Vec =
  length = sqrt (iprod c c)
  // print "length: ${length}"
  if abs length > 0.00000000001
  then Vec (c.x / length) (c.y / length) (c.z / length)
  else c

vcross (v0:Vec) (v1:Vec) : Vec =
  Vec (v0.y * v1.z - v0.z * v1.y)
      (v0.z * v1.x - v0.x * v1.z)
      (v0.x * v1.y - v0.y * v1.x)


negate (n:F64) : F64 =
  0.0 - n


ray_sphere_intersect isect (r:Ray) (s:Sphere) =
  rs = Vec (r.org.x - s.center.x)
           (r.org.y - s.center.y)
           (r.org.z - s.center.z)
  b = iprod rs r.dir
  c = iprod rs rs - s.radius * s.radius
  d = b * b - c
  if d > 0.0
  then
    t = negate b - sqrt d
    if t > 0.0 and t < isect.t
    then
      p = Vec (r.org.x + r.dir.x * t)
              (r.org.y + r.dir.y * t)
              (r.org.z + r.dir.z * t)
      n = Vec (p.x - s.center.x)
              (p.y - s.center.y)
              (p.z - s.center.z)
      Isect t p (vnormalize n) true
    else
      isect
  else
    isect


ray_plane_intersect isect (r:Ray) (p:Plane) =
  d = negate(iprod p.p p.n)
  v = iprod r.dir p.n
  if abs v < 0.00000000000000001
  then isect
  else
    t = negate ((iprod r.org p.n) + d) / v
    if t > 0.0 and t < isect.t
    then
      Isect t
            (Vec (r.org.x + r.dir.x * t)
                 (r.org.y + r.dir.y * t)
                 (r.org.z + r.dir.z * t))
            p.n
            true
    else
      isect


orthoBasis (n: Vec) : (Vec, Vec, Vec) =
  basis2 = n
  basis1 = if n.x < 0.6 and n.x > -0.6 then
             Vec 1.0 0.0 0.0
           else if n.y < 0.6 and n.y > -0.6 then
             Vec 0.0 1.0 0.0
           else if n.z < 0.6 and n.z > -0.6 then
             Vec 0.0 0.0 1.0
           else
             Vec 1.0 0.0 0.0
  basis0 = vnormalize (vcross basis1 basis2)
  basis1 = vnormalize (vcross basis2 basis0)
  basis0, basis1, basis2


// drand48 () : F64 = Random.drand48 ()


ambient_occlusion (isect:Isect) (spheres:Triple Sphere) plane =
  ntheta = nao_samples
  nphi   = nao_samples
  eps    = 0.0001
  p      = Vec (isect.p.x + eps * isect.n.x)
               (isect.p.y + eps * isect.n.y)
               (isect.p.z + eps * isect.n.z)
  basis0, basis1, basis2 = orthoBasis (isect.n)
  occlusion = mut 0.0

  iter (Range 0 ntheta) fn _ ->
    iter (Range 0 nphi) fn _ ->
      theta = sqrt(drand48())
      phi   = 2.0 * 3.1415926535 * drand48()
      x,y,z = (cos phi) * theta,
              (sin phi) * theta,
              sqrt (1.0 - theta * theta)
      rx    = x * basis0.x + y * basis1.x + z * basis2.x
      ry    = x * basis0.y + y * basis1.y + z * basis2.y
      rz    = x * basis0.z + y * basis1.z + z * basis2.z

      zero  = Vec 0.0 0.0 0.0
      ray   = Ray p (Vec rx ry rz)
      occIsect1 = Isect 100000000000000000.0 zero zero false
      occIsect2 = ray_sphere_intersect occIsect1 ray spheres.first
      occIsect3 = ray_sphere_intersect occIsect2 ray spheres.second
      occIsect4 = ray_sphere_intersect occIsect3 ray spheres.third
      occIsect5 = ray_plane_intersect  occIsect4 ray plane

      occlusion := @occlusion + if occIsect5.hit then 1.0 else 0.0

  occ = (cast (ntheta * nphi) - @occlusion) / cast (ntheta * nphi)
  Vec occ occ occ


clamp (f: Float a) : U8 =
  byte: U64 = cast (f * 255.5)
  cast byte


render (img: Ptr U8) (w:Usz) (h:Usz) nsubsamples (spheres:Triple Sphere) plane : Unit =
  fimg : Ptr F64 = malloc (w * h * 3 * size_of(MkType: Type F64))
  iter (Range 0 h) fn (y:Usz) ->
    iter (Range 0 w) fn (x:Usz) ->
      iter (Range 0 nsubsamples) fn (v:Usz) ->
        iter (Range 0 nsubsamples) fn (u:Usz) ->
          zero = Vec 0.0 0.0 0.0
          px   =       (cast x + (cast u / cast nsubsamples) - (cast w/2.0)) / (cast w/2.0)
          py   = negate(cast y + (cast v / cast nsubsamples) - (cast h/2.0)) / (cast h/2.0)
          ray  = Ray zero (vnormalize (Vec px py -1.0))

          isect1 = Isect 100000000000000000.0 zero zero false
          isect2 = ray_sphere_intersect isect1 ray spheres.first
          isect3 = ray_sphere_intersect isect2 ray spheres.second
          isect4 = ray_sphere_intersect isect3 ray spheres.third
          isect5 = ray_plane_intersect  isect4 ray plane

          if isect5.hit
          then
            col = ambient_occlusion isect5 spheres plane
            base: Usz = 3*(y*w+x)
            array_insert fimg (base+0) (fimg#(base+0) + col.x)
            array_insert fimg (base+1) (fimg#(base+1) + col.y)
            array_insert fimg (base+2) (fimg#(base+2) + col.z)
          else
            ()
      base: Usz = 3*(y*w+x)
      array_insert fimg (base+0) (fimg#(base+0) / cast (nsubsamples * nsubsamples))
      array_insert fimg (base+1) (fimg#(base+1) / cast (nsubsamples * nsubsamples))
      array_insert fimg (base+2) (fimg#(base+2) / cast (nsubsamples * nsubsamples))

      array_insert img (base+0) (clamp (fimg#(base+0)))
      array_insert img (base+1) (clamp (fimg#(base+1)))
      array_insert img (base+2) (clamp (fimg#(base+2)))
  // free fimg // this raises a type error


saveppm fname w h (img: Ptr U8) =
  print "saving..."
  file: OutFile = open_outfile fname
  fputs "P6\n".c_string file
  fputs "${w} ${h}\n".c_string file
  fputs "255\n".c_string file
  iter (Range 0 (w*h)) fn (i:Usz) ->
    // divide loop for avoiding stack overflow
    x0: U32 = cast (img#(i*3+0))
    fputc (transmute x0) file
    x1: U32 = cast (img#(i*3+1))
    fputc (transmute x1) file
    x2: U32 = cast (img#(i*3+2))
    fputc (transmute x2) file

  fclose file.f


main () =
  print "init_scene..."
  spheres, plane = init ()
  print "rendering..."
  img: Ptr U8 = calloc (width * height * 3 : Usz) 1
  render img width height nsubsamples spheres plane
  saveppm "aobench.ppm" width height img
  free img


main ()


